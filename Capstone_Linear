{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Capstone_Linear","provenance":[{"file_id":"1PFg9f3oXgRPAbs_ctwlVztrFXCAe6Pqw","timestamp":1577047889021}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"hIcwMqadDUpZ","colab_type":"code","outputId":"71d72f2a-b369-4fa2-f3f0-515d7f41ffd5","executionInfo":{"status":"ok","timestamp":1577047922685,"user_tz":300,"elapsed":13607,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":683}},"source":["pip install --upgrade google-cloud-bigquery"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting google-cloud-bigquery\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b5/6c/b3ae29876dbbd63ca8fdf284fdf07ef025c06feacb18710e9571f6641246/google_cloud_bigquery-1.23.1-py2.py3-none-any.whl (162kB)\n","\r\u001b[K     |██                              | 10kB 19.0MB/s eta 0:00:01\r\u001b[K     |████                            | 20kB 3.1MB/s eta 0:00:01\r\u001b[K     |██████                          | 30kB 4.5MB/s eta 0:00:01\r\u001b[K     |████████                        | 40kB 2.9MB/s eta 0:00:01\r\u001b[K     |██████████                      | 51kB 3.6MB/s eta 0:00:01\r\u001b[K     |████████████                    | 61kB 4.3MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 71kB 4.9MB/s eta 0:00:01\r\u001b[K     |████████████████                | 81kB 5.5MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 92kB 6.1MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 102kB 4.8MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 112kB 4.8MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 122kB 4.8MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 133kB 4.8MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 143kB 4.8MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 153kB 4.8MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 163kB 4.8MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: protobuf>=3.6.0 in /usr/local/lib/python3.6/dist-packages (from google-cloud-bigquery) (3.10.0)\n","Requirement already satisfied, skipping upgrade: google-cloud-core<2.0dev,>=1.0.3 in /usr/local/lib/python3.6/dist-packages (from google-cloud-bigquery) (1.0.3)\n","Collecting six<2.0.0dev,>=1.13.0\n","  Downloading https://files.pythonhosted.org/packages/65/26/32b8464df2a97e6dd1b656ed26b2c194606c16fe163c695a992b36c11cdf/six-1.13.0-py2.py3-none-any.whl\n","Requirement already satisfied, skipping upgrade: google-resumable-media!=0.4.0,<0.6.0dev,>=0.3.1 in /usr/local/lib/python3.6/dist-packages (from google-cloud-bigquery) (0.4.1)\n","Requirement already satisfied, skipping upgrade: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.6.0->google-cloud-bigquery) (42.0.2)\n","Requirement already satisfied, skipping upgrade: google-api-core<2.0.0dev,>=1.14.0 in /usr/local/lib/python3.6/dist-packages (from google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (1.15.0)\n","Requirement already satisfied, skipping upgrade: pytz in /usr/local/lib/python3.6/dist-packages (from google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (2018.9)\n","Requirement already satisfied, skipping upgrade: google-auth<2.0dev,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (1.4.2)\n","Requirement already satisfied, skipping upgrade: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (1.6.0)\n","Requirement already satisfied, skipping upgrade: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (2.21.0)\n","Requirement already satisfied, skipping upgrade: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (4.0)\n","Requirement already satisfied, skipping upgrade: cachetools>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (4.0.0)\n","Requirement already satisfied, skipping upgrade: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (0.2.7)\n","Requirement already satisfied, skipping upgrade: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (3.0.4)\n","Requirement already satisfied, skipping upgrade: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (2.8)\n","Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (2019.11.28)\n","Requirement already satisfied, skipping upgrade: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (1.24.3)\n","Requirement already satisfied, skipping upgrade: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa>=3.1.4->google-auth<2.0dev,>=0.4.0->google-api-core<2.0.0dev,>=1.14.0->google-cloud-core<2.0dev,>=1.0.3->google-cloud-bigquery) (0.4.8)\n","\u001b[31mERROR: google-colab 1.0.0 has requirement six~=1.12.0, but you'll have six 1.13.0 which is incompatible.\u001b[0m\n","\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n","\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n","Installing collected packages: six, google-cloud-bigquery\n","  Found existing installation: six 1.12.0\n","    Uninstalling six-1.12.0:\n","      Successfully uninstalled six-1.12.0\n","  Found existing installation: google-cloud-bigquery 1.21.0\n","    Uninstalling google-cloud-bigquery-1.21.0:\n","      Successfully uninstalled google-cloud-bigquery-1.21.0\n","Successfully installed google-cloud-bigquery-1.23.1 six-1.13.0\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["google","six"]}}},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"s7ASYtLADf6V","colab_type":"code","colab":{}},"source":["from google.colab import auth\n","auth.authenticate_user()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KyGFUiHDDf5g","colab_type":"code","outputId":"a3d482cf-c44b-4f36-bcc1-4ac9e8aa0fa1","executionInfo":{"status":"ok","timestamp":1577452912341,"user_tz":300,"elapsed":18019,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["from google.cloud import bigquery\n","\n","# https://cloud.google.com/resource-manager/docs/creating-managing-projects\n","project_id = 'capstone-247602'\n","client = bigquery.Client(project=project_id)\n","\n","for dataset in client.list_datasets():\n","  print(dataset.dataset_id)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Digital_Data\n","Nielsen_Data\n","combined_digital_linear\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PZh_NsHrESPG","colab_type":"code","outputId":"a3d94eea-05ed-451e-fd80-b5b6bd7882a9","executionInfo":{"status":"ok","timestamp":1577452919956,"user_tz":300,"elapsed":4667,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["import pandas as pd\n","\n","# https://cloud.google.com/resource-manager/docs/creating-managing-projects\n","project_id = 'capstone-247602'\n","df = pd.io.gbq.read_gbq('''\n","SELECT * FROM `capstone-247602.combined_digital_linear.tbl_title_matching_stage_3_FINAL`''', \n","project_id=project_id, verbose=False)\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/io/gbq.py:176: FutureWarning: verbose is deprecated and will be removed in a future version. Set logging level in order to vary verbosity\n","  **kwargs\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"lAMQR_TVESOe","colab_type":"code","outputId":"3f893369-07f4-455b-bcbc-6394faf5b37d","executionInfo":{"status":"ok","timestamp":1577452933981,"user_tz":300,"elapsed":343,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["df.describe()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ANV_ID__PRIMARY_</th>\n","      <th>episode_number</th>\n","      <th>season_number</th>\n","      <th>asset_length</th>\n","      <th>total_mins_viewed</th>\n","      <th>average_mins_viewed</th>\n","      <th>Season</th>\n","      <th>Imps</th>\n","      <th>Median_Age</th>\n","      <th>Median_Income</th>\n","      <th>Dur</th>\n","      <th>Percent_Digital_Viewership</th>\n","      <th>Percent_Linear_Viewership</th>\n","      <th>weekday</th>\n","      <th>genre_dummy</th>\n","      <th>quarter</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>2.954000e+03</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2.954000e+03</td>\n","      <td>2.954000e+03</td>\n","      <td>2954.000000</td>\n","      <td>2.954000e+03</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","      <td>2954.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.304024e+06</td>\n","      <td>9.597495</td>\n","      <td>25.962085</td>\n","      <td>45.461215</td>\n","      <td>4.108023e+07</td>\n","      <td>9.304477e+05</td>\n","      <td>2015.641842</td>\n","      <td>7.716381e+06</td>\n","      <td>55.257278</td>\n","      <td>63514.793500</td>\n","      <td>63.876439</td>\n","      <td>0.103971</td>\n","      <td>0.896029</td>\n","      <td>0.828030</td>\n","      <td>0.899120</td>\n","      <td>2.305349</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>4.296585e+05</td>\n","      <td>20.612977</td>\n","      <td>205.212300</td>\n","      <td>19.261800</td>\n","      <td>3.831945e+07</td>\n","      <td>8.244928e+05</td>\n","      <td>1.648925</td>\n","      <td>3.724737e+06</td>\n","      <td>3.846111</td>\n","      <td>6788.998878</td>\n","      <td>27.565726</td>\n","      <td>0.067533</td>\n","      <td>0.067533</td>\n","      <td>0.377418</td>\n","      <td>0.750198</td>\n","      <td>1.126983</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2.705438e+06</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>20.480000</td>\n","      <td>7.375452e+04</td>\n","      <td>1.730514e+03</td>\n","      <td>2013.000000</td>\n","      <td>1.066531e+06</td>\n","      <td>39.000000</td>\n","      <td>44300.000000</td>\n","      <td>19.000000</td>\n","      <td>0.000512</td>\n","      <td>0.538474</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2.864427e+06</td>\n","      <td>4.000000</td>\n","      <td>1.000000</td>\n","      <td>42.020000</td>\n","      <td>1.393797e+07</td>\n","      <td>3.780448e+05</td>\n","      <td>2014.000000</td>\n","      <td>4.672455e+06</td>\n","      <td>53.000000</td>\n","      <td>59000.000000</td>\n","      <td>59.000000</td>\n","      <td>0.057359</td>\n","      <td>0.864399</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.427078e+06</td>\n","      <td>8.000000</td>\n","      <td>3.000000</td>\n","      <td>42.850000</td>\n","      <td>3.321218e+07</td>\n","      <td>7.653732e+05</td>\n","      <td>2016.000000</td>\n","      <td>6.947842e+06</td>\n","      <td>56.000000</td>\n","      <td>63200.000000</td>\n","      <td>60.000000</td>\n","      <td>0.095256</td>\n","      <td>0.904744</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>3.692622e+06</td>\n","      <td>13.000000</td>\n","      <td>6.000000</td>\n","      <td>43.250000</td>\n","      <td>5.324196e+07</td>\n","      <td>1.235554e+06</td>\n","      <td>2017.000000</td>\n","      <td>1.055797e+07</td>\n","      <td>58.000000</td>\n","      <td>67600.000000</td>\n","      <td>60.000000</td>\n","      <td>0.135601</td>\n","      <td>0.942641</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>4.030959e+06</td>\n","      <td>999.000000</td>\n","      <td>2019.000000</td>\n","      <td>144.950000</td>\n","      <td>2.709278e+08</td>\n","      <td>5.868049e+06</td>\n","      <td>2018.000000</td>\n","      <td>3.211383e+07</td>\n","      <td>64.000000</td>\n","      <td>87100.000000</td>\n","      <td>192.000000</td>\n","      <td>0.461526</td>\n","      <td>0.999488</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>4.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       ANV_ID__PRIMARY_  episode_number  ...  genre_dummy      quarter\n","count      2.954000e+03     2954.000000  ...  2954.000000  2954.000000\n","mean       3.304024e+06        9.597495  ...     0.899120     2.305349\n","std        4.296585e+05       20.612977  ...     0.750198     1.126983\n","min        2.705438e+06        0.000000  ...     0.000000     1.000000\n","25%        2.864427e+06        4.000000  ...     0.000000     1.000000\n","50%        3.427078e+06        8.000000  ...     1.000000     2.000000\n","75%        3.692622e+06       13.000000  ...     1.000000     3.000000\n","max        4.030959e+06      999.000000  ...     3.000000     4.000000\n","\n","[8 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"iVaiVlXlHRhW","colab_type":"code","colab":{}},"source":["\n","from pandas import read_csv\n","from pandas import datetime\n","from matplotlib import pyplot\n","import numpy as np\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HVPdSq0yHcRp","colab_type":"code","outputId":"d9c6c57c-022e-4a6a-d4bb-8b90085ad858","executionInfo":{"status":"ok","timestamp":1577048645230,"user_tz":300,"elapsed":393,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":462}},"source":["show_table = df[df.Show_Name == \"SUPERSTORE\"]\n","#show_table = df[df.genre_dummy == 2]\n","#show_table = df\n","#show_table.sort_values(by='airdate')\n","show_table['days_since_last_episode'] = show_table.groupby('Season')['airdate'].diff().fillna(0).astype(str).str[:2]\n","show_table['days_since_1st_episode'] = (show_table.airdate - show_table.airdate.min()).astype(str).str[:2]\n","show_table = show_table[['days_since_last_episode','days_since_1st_episode','Percent_Digital_Viewership','weekday','season_number','episode_number','quarter','start_hour_dummy','Season','genre_dummy']]\n","show_table.head()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: FutureWarning: Passing integers to fillna is deprecated, will raise a TypeError in a future version.  To retain the old behavior, pass pd.Timedelta(seconds=n) instead.\n","  \"\"\"\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>days_since_last_episode</th>\n","      <th>days_since_1st_episode</th>\n","      <th>Percent_Digital_Viewership</th>\n","      <th>weekday</th>\n","      <th>season_number</th>\n","      <th>episode_number</th>\n","      <th>quarter</th>\n","      <th>start_hour_dummy</th>\n","      <th>Season</th>\n","      <th>genre_dummy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1300</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.146260</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>2015</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1301</th>\n","      <td>35</td>\n","      <td>35</td>\n","      <td>0.216898</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>2015</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1302</th>\n","      <td>7</td>\n","      <td>42</td>\n","      <td>0.229186</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>2015</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1303</th>\n","      <td>7</td>\n","      <td>49</td>\n","      <td>0.218215</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>2015</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1304</th>\n","      <td>7</td>\n","      <td>56</td>\n","      <td>0.243097</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>2015</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     days_since_last_episode days_since_1st_episode  ...  Season  genre_dummy\n","1300                      0                      0   ...    2015            2\n","1301                      35                     35  ...    2015            2\n","1302                      7                      42  ...    2015            2\n","1303                      7                      49  ...    2015            2\n","1304                      7                      56  ...    2015            2\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"HRDh7z_znLN4","colab_type":"code","colab":{}},"source":["X = show_table.drop('Percent_Digital_Viewership', axis=1).values\n","y = show_table['Percent_Digital_Viewership'].values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7ex0nY7IlSNv","colab_type":"code","outputId":"b2bab282-a9d3-43ec-f4ac-f0aa80313837","executionInfo":{"status":"ok","timestamp":1577048652532,"user_tz":300,"elapsed":329,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from sklearn.model_selection import train_test_split\n","from sklearn import linear_model\n","X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.25, random_state=42)\n","reg_all = linear_model.LinearRegression()\n","reg_all.fit(X_train, y_train)\n","y_pred = reg_all.predict(X_test)\n","reg_all.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5931580006227137"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"code","metadata":{"id":"wSbM8TgHlCVK","colab_type":"code","outputId":"672463df-d7f9-4df0-8370-1685206c8ec9","executionInfo":{"status":"ok","timestamp":1577048655381,"user_tz":300,"elapsed":408,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from sklearn.model_selection import cross_val_score\n","reg = linear_model.LinearRegression()\n","cv_results = cross_val_score(reg, X, y, cv=5)\n","print(cv_results)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[-5.87449992 -6.59708171 -6.80482857 -3.81324484 -0.15399916]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DFnqwL3hmzXi","colab_type":"code","outputId":"2db4e4b6-9878-4809-f1c0-0835ca250455","executionInfo":{"status":"ok","timestamp":1577048658616,"user_tz":300,"elapsed":1466,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Ridge Regression\n","from sklearn.linear_model import Ridge\n","X_train, X_test, y_train, y_test = train_test_split(X, y,\n","test_size = 0.3, random_state=42)\n","ridge = Ridge(alpha=0.1, normalize=True)\n","ridge.fit(X_train, y_train)\n","ridge_pred = ridge.predict(X_test)\n","ridge.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5152712652500495"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"6_Lu8e9lbnSs","colab_type":"code","outputId":"6d13f453-c7bf-4429-8a77-f14d034ce928","executionInfo":{"status":"ok","timestamp":1577049287050,"user_tz":300,"elapsed":341,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\n","\n","pred_next_quarter=np.array([[0,0,0,0,0,1,0,2020,2],[0,0,0,0,0,2,0,2020,2],[0,0,0,0,0,3,0,2020,2],[0,0,0,0,0,4,0,2020,2]])\n","pred_next_quarter\n","ridge_pred = ridge.predict(pred_next_quarter)\n","ridge_pred\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.2495859 , 0.24777309, 0.24596028, 0.24414747])"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"PxKPrUnFm4VD","colab_type":"code","outputId":"f1e233a7-2cf1-41ff-a3d8-d4faba773a7d","executionInfo":{"status":"ok","timestamp":1577048660290,"user_tz":300,"elapsed":606,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Lasso Regression\n","from sklearn.linear_model import Lasso\n","X_train, X_test, y_train, y_test = train_test_split(X, y,\n","test_size = 0.3, random_state=42)\n","lasso = Lasso(alpha=0.1, normalize=True)\n","lasso.fit(X_train, y_train)\n","lasso_pred = lasso.predict(X_test)\n","lasso.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.046177859016096834"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"nzWWWK-hnBVp","colab_type":"code","outputId":"784d971f-bf2d-424f-e37b-eca9b79dd0cb","executionInfo":{"status":"ok","timestamp":1577048662668,"user_tz":300,"elapsed":690,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":368}},"source":["# Lasso for feature selection\n","from sklearn.linear_model import Lasso\n","names = show_table.drop('Percent_Digital_Viewership', axis=1).columns\n","lasso = Lasso(alpha=0.1)\n","lasso_coef = lasso.fit(X, y).coef_\n","_ = pyplot.plot(range(len(names)), lasso_coef)\n","_ = pyplot.xticks(range(len(names)), names, rotation=60)\n","_ = pyplot.ylabel('Coefficients')\n","pyplot.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"W_Q0XdI0n28g","colab_type":"code","colab":{}},"source":["import pandas as pd  \n","import numpy as np  \n","import matplotlib.pyplot as plt  \n","import seaborn as seabornInstance \n","from sklearn.model_selection import train_test_split \n","from sklearn.linear_model import LinearRegression\n","from sklearn import metrics\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZhRd_Pjgn3ZK","colab_type":"code","colab":{}},"source":["show_table = show_table.fillna(method='ffill')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1pNNhekfn3cJ","colab_type":"code","outputId":"9aa16d79-ff9d-4bd5-a0a6-fb9b79ab7e6f","executionInfo":{"status":"error","timestamp":1577048141910,"user_tz":300,"elapsed":420,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":200}},"source":["#X = show_table = show_table[['days_since_last_episode','days_since_1st_episode','Percent_Digital_Viewership','weekday','season_number','episode_number','quarter','start_hour_dummy','Season']].values\n","#y = show_table['Percent_Digital_Viewership'].values"],"execution_count":0,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-0ca907c5af95>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshow_table\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshow_table\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'days_since_last_episode'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'days_since_1st_episode'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Percent_Digital_Viewership'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'weekday'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'season_number'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'episode_number'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'quarter'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'start_hour_dummy'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Season'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshow_table\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Percent_Digital_Viewership'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"]}]},{"cell_type":"code","metadata":{"id":"R_kXwttXn3fH","colab_type":"code","outputId":"fb5c80b6-4e02-4efa-885d-8327e5bd8953","executionInfo":{"status":"ok","timestamp":1577048680683,"user_tz":300,"elapsed":1249,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":623}},"source":["plt.figure(figsize=(15,10))\n","plt.tight_layout()\n","seabornInstance.distplot(show_table['Percent_Digital_Viewership'])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f817763f550>"]},"metadata":{"tags":[]},"execution_count":57},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1080x720 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"yP2dZ6njqaNj","colab_type":"code","colab":{}},"source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"l0VptENlqaTu","colab_type":"code","outputId":"6c302175-1520-4f0a-b2a8-ab5f5160996e","executionInfo":{"status":"ok","timestamp":1577048685409,"user_tz":300,"elapsed":413,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["regressor = LinearRegression()  \n","regressor.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"jbnrFtclqaVc","colab_type":"code","outputId":"5bd50906-d7aa-4e81-e022-64d4a1a017ce","executionInfo":{"status":"error","timestamp":1577048687268,"user_tz":300,"elapsed":419,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":180}},"source":["coeff_df = pd.DataFrame(regressor.coef_, X.columns, columns=['Coefficient'])  \n","coeff_df"],"execution_count":0,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-60-00b5b4f20ffc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcoeff_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mregressor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Coefficient'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mcoeff_df\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'columns'"]}]},{"cell_type":"code","metadata":{"id":"QwMA3SMJqaXu","colab_type":"code","colab":{}},"source":["y_pred = regressor.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9oYQn9WXqabz","colab_type":"code","colab":{}},"source":["df_results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\n","df1 = df.head(25)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vvt2uR8iqaQR","colab_type":"code","outputId":"3fb69a92-f159-4a8e-e383-8b43a2348c32","executionInfo":{"status":"ok","timestamp":1577048694092,"user_tz":300,"elapsed":1202,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":411}},"source":["df1.plot(kind='bar',figsize=(10,8))\n","plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\n","plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    332\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    239\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 241\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    242\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m     \u001b[0mbytes_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2061\u001b[0m                         \u001b[0morientation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2062\u001b[0m                         \u001b[0mdryrun\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2063\u001b[0;31m                         **kwargs)\n\u001b[0m\u001b[1;32m   2064\u001b[0m                     \u001b[0mrenderer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cachedRenderer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2065\u001b[0m                     \u001b[0mbbox_artists\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bbox_extra_artists\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    525\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    526\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 527\u001b[0;31m             \u001b[0mFigureCanvasAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    528\u001b[0m             \u001b[0mrenderer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_renderer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    529\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    386\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_renderer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcleared\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    387\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mRendererAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 388\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    389\u001b[0m             \u001b[0;31m# A GUI class may be need to update a window using this draw, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    390\u001b[0m             \u001b[0;31m# don't forget to call the superclass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1707\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1708\u001b[0m             mimage._draw_list_compositing_images(\n\u001b[0;32m-> 1709\u001b[0;31m                 renderer, self, artists, self.suppressComposite)\n\u001b[0m\u001b[1;32m   1710\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1711\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'figure'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    133\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2646\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2647\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2648\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2649\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    133\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1201\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1203\u001b[0;31m         \u001b[0mticks_to_draw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1204\u001b[0m         ticklabelBoxes, ticklabelBoxes2 = self._get_tick_bboxes(ticks_to_draw,\n\u001b[1;32m   1205\u001b[0m                                                                 renderer)\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_update_ticks\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1077\u001b[0m         \u001b[0mthe\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m  \u001b[0mReturn\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mlist\u001b[0m \u001b[0mof\u001b[0m \u001b[0mticks\u001b[0m \u001b[0mthat\u001b[0m \u001b[0mwill\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mdrawn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1078\u001b[0m         \"\"\"\n\u001b[0;32m-> 1079\u001b[0;31m         \u001b[0mmajor_locs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_majorticklocs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1080\u001b[0m         \u001b[0mmajor_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmajor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmajor_locs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1081\u001b[0m         \u001b[0mmajor_ticks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_major_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmajor_locs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_majorticklocs\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1322\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_majorticklocs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1323\u001b[0m         \u001b[0;34m\"\"\"Get the array of major tick locations in data coordinates.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1324\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmajor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1325\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1326\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_minorticklocs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/dates.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1426\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1427\u001b[0m         \u001b[0;34m'Return the locations of the ticks'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1428\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrefresh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1429\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_locator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/dates.py\u001b[0m in \u001b[0;36mrefresh\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1446\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrefresh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1447\u001b[0m         \u001b[0;34m'Refresh internal information based on current limits.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1448\u001b[0;31m         \u001b[0mdmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mviewlim_to_dt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1449\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_locator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_locator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdmax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1450\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/dates.py\u001b[0m in \u001b[0;36mviewlim_to_dt\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1197\u001b[0m                              \u001b[0;34m'often happens if you pass a non-datetime '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1198\u001b[0m                              \u001b[0;34m'value to an axis that has datetime units'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1199\u001b[0;31m                              .format(vmin))\n\u001b[0m\u001b[1;32m   1200\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnum2date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum2date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: view limit minimum 0.0 is less than 1 and is an invalid Matplotlib date value. This often happens if you pass a non-datetime value to an axis that has datetime units"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x576 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"9kwhmzMLtAqG","colab_type":"code","outputId":"b0cb800e-5525-413c-c03a-a219553028f7","executionInfo":{"status":"ok","timestamp":1577048447827,"user_tz":300,"elapsed":405,"user":{"displayName":"Christopher Lattanzio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAZZPFLSjK4IdG_ds-sFPhjRh5M6TtRV24SIMmy=s64","userId":"16054195019132294960"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \n","print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \n","print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Mean Absolute Error: 0.05106849831303671\n","Mean Squared Error: 0.004520458917365418\n","Root Mean Squared Error: 0.06723435816132566\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mNNQtmu1g0Vl","colab_type":"code","colab":{}},"source":["plt.figure()\n","\n","plt.plot(df_ss_ARIMA.index, df_ss_ARIMA, label='observed')\n","\n","#plot predictions\n","plt.plot(arima_value_forecast.index,\n","         arima_value_forecast.forecast,\n","         color='red',\n","         label='forecast')\n","\n","plt.fill_between(arima_value_forecast.index, lower_limits, upper_limits, color='pink',label='limits')\n","\n","plt.xlabel('Date')\n","plt.ylabel('Percent Digital')\n","plt.legend()\n","\n","plt.show()"],"execution_count":0,"outputs":[]}]}